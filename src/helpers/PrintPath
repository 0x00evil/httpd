#!/bin/sh
# Look for program[s] somewhere in $PATH.
#
# Options:
#  -s
#    Do not print out full pathname. (silent)
#  -pPATHNAME
#    Look in PATHNAME instead of $PATH
#
# Usage:
#  PrintPath [-s] [-pPATHNAME] program [program ...]
#
##
# Some "constants"
##
pathname=$PATH
echo="yes"

##
# Parse command line
##
for args in $*
do
    case $args in
	-s  ) echo="no" ;;
	-p* ) pathname="`echo $args | sed 's/^..//'`" ;;
	*   ) programs="$programs $args" ;;
    esac
done

##
# We do some funny stuff to check to see
# if test/[] knows about -x
##
testfile="pp.t.$$"

cat > $testfile <<ENDTEST
#!/bin/sh
if [ -x / ] || [ -x /bin ] || [ -x /bin/ls ]; then
    exit 0
fi
exit 1
ENDTEST

if `/bin/sh $testfile 2>/dev/null`; then
    test_exec_flag="-x"
else
    test_exec_flag="-r"
fi
rm -f $testfile

for program in $programs
do
    for path in `echo $pathname |
     sed 's/^:/.:/
	  s/::/:.:/g
	  s/:$/:./
	  s/:/ /g' `
    do
	if [ $test_exec_flag $path/$program ] && [ ! -d $path/$program ]; then
	    if [ "$echo" = "yes" ]; then
		echo $path/$program
	    fi
	    exit 0
	fi
    done
done
exit 1

