/*
**  apapi.h -- Apache API prototypes
*/

#ifndef APAPI_H
#define APAPI_H

extern void ap_MD5Final(unsigned char digest[16], AP_MD5_CTX * context);
extern void ap_MD5Init(AP_MD5_CTX * context);
extern ;
extern void ap_add_cgi_vars(request_rec *r);
extern void ap_add_common_vars(request_rec *r);
extern void ap_add_module(module *m);
extern int ap_add_named_module(const char *name);
extern int ap_allow_options (request_rec *r);
extern int ap_allow_overrides (request_rec *r);
extern ;
extern void ap_array_cat(array_header *dst, const array_header *src);
extern char * ap_auth_name (request_rec *r);
extern char * ap_auth_type (request_rec *r);
extern void ap_basic_http_header(request_rec *r);
extern int ap_bclose(BUFF *fb);
extern BUFF * ap_bcreate(pool *p, int flags);
extern int ap_bfilbuf(BUFF *fb);
extern int ap_bfileno(BUFF *fb, int direction);
extern int ap_bflsbuf(int c, BUFF *fb);
extern int ap_bflush(BUFF *fb);
extern int ap_bgetopt(BUFF *fb, int optname, void *optval);
extern int ap_bgets(char *buff, int n, BUFF *fb);
extern void ap_bhalfduplex(BUFF *fb);
extern void ap_block_alarms();
extern int ap_blookc(char *buff, BUFF *fb);
extern int ap_bnonblock(BUFF *fb, int direction);
extern void ap_bonerror(BUFF *fb, void (*error);
extern void ap_bpushfd(BUFF *fb, int fd_in, int fd_out);
extern int ap_bputs(const char *x, BUFF *fb);
extern int ap_bread(BUFF *fb, void *buf, int nbyte);
extern int ap_bsetflag(BUFF *fb, int flag, int value);
extern int ap_bsetopt(BUFF *fb, int optname, const void *optval);
extern int ap_bskiplf(BUFF *fb);
extern int ap_bwrite(BUFF *fb, const void *buf, int nbyte);
extern long ap_bytes_in_free_blocks(void);
extern long ap_bytes_in_pool(pool *p);
extern int ap_call_exec(request_rec *r, char *argv0, char **env, int shellcmd);
extern int ap_can_exec(const struct stat *finfo);
extern int ap_cfg_closefile(configfile_t *fp);
extern int ap_cfg_getc(configfile_t *cfp);
extern int ap_cfg_getline(char *buf, size_t bufsize, configfile_t *cfp);
extern void ap_chdir_file(const char *file);
extern const char * ap_check_cmd_context(cmd_parms *cmd, unsigned forbidden);
extern int ap_checkmask(const char *data, const char *mask);
extern void ap_child_terminate(request_rec *r);
extern void ap_cleanup_for_exec(void);
extern void ap_clear_module_list();
extern void ap_clear_pool(struct pool *a);
extern void ap_clear_table(table *t);
extern void ap_close_piped_log (piped_log *pl);
/* prototype for `ap_construct_server' cannot be found */
extern char * ap_construct_url(pool *p, const char *uri, const request_rec *r);
extern array_header * ap_copy_array(pool *p, const array_header *arr);
extern array_header * ap_copy_array_hdr(pool *p, const array_header *arr);
extern table * ap_copy_table(pool *p, const table *t);
extern int ap_count_dirs(const char *path);
extern char ** ap_create_environment(pool *p, table *t);
extern void * ap_create_per_dir_config(pool *p);
extern unsigned short ap_default_port_for_request(const request_rec *r);
extern unsigned short ap_default_port_for_scheme(const char *scheme_str);
extern char * ap_default_type (request_rec *r);
extern void ap_destroy_pool(pool *a);
extern void ap_destroy_sub_req(request_rec *r);
extern int ap_discard_request_body(request_rec *r);
extern char * ap_document_root (request_rec *r);
extern int ap_each_byterange(request_rec *r, long *offset, long *length);
extern void ap_error_log2stderr (server_rec *s);
extern char * ap_escape_html(pool *p, const char *s);
extern char * ap_escape_path_segment(pool *p, const char *segment);
extern char * ap_escape_shell_cmd(pool *p, const char *str);
extern int ap_exists_scoreboard_image(void);
extern int ap_find_last_token(pool *p, const char *line, const char *tok);
extern module * ap_find_linked_module(const char *name);
extern const char * ap_find_module_name(module *m);
extern int ap_find_path_info(const char *uri, const char *path_info);
extern pool * ap_find_pool(const void *ts);
extern int ap_find_token(pool *p, const char *line, const char *tok);
extern int ap_get_basic_auth_pw(request_rec *r, char **pw);
extern long ap_get_client_block(request_rec *r, char *buffer, int bufsiz);
extern struct tm * ap_get_gmtoff(int *tz);
extern void * ap_get_module_config(void *conf_vector, module *m);
extern const char * ap_get_remote_host(conn_rec *conn, void *dir_config, int type);
extern const char * ap_get_remote_logname(request_rec *r);
extern const char * ap_get_server_name(const request_rec *r);
extern unsigned ap_get_server_port(const request_rec *r);
extern char * ap_get_time();
extern char * ap_get_token(pool *p, char **accept_line, int accept_white);
extern void ap_getparents(char *name);
extern char * ap_getword(pool *atrans, const char **line, char stop);
extern char * ap_getword_conf(pool *p, const char **line);
extern char * ap_getword_conf_nc(pool *p, char **line);
extern char * ap_getword_nc(pool *atrans, char **line, char stop);
extern char * ap_getword_nulls(pool *atrans, const char **line, char stop);
extern char * ap_getword_nulls_nc(pool *atrans, char **line, char stop);
extern char * ap_getword_white(pool *atrans, const char **line);
extern char * ap_getword_white_nc(pool *atrans, char **line);
extern char * ap_gm_timestr_822(pool *p, time_t sec);
extern gid_t ap_gname2id(const char *name);
extern void ap_hard_timeout(char *name, request_rec *r);
extern char * ap_ht_time(pool *p, time_t t, const char *fmt, int gmt);
extern int ap_ind(const char *s, char c);
extern int ap_index_of_response(int status);
extern void ap_internal_redirect(const char *new_uri, request_rec *r);
extern void ap_internal_redirect_handler(const char *new_uri, request_rec *r);
extern int ap_is_directory(const char *path);
extern int ap_is_initial_req(request_rec *r);
extern int ap_is_matchexp(const char *str);
extern int ap_is_url(const char *u);
extern void ap_kill_cleanup(pool *p, void *data, void (*cleanup);
extern void ap_kill_cleanups_for_fd(pool *p, int fd);
extern void ap_kill_cleanups_for_socket(pool *p, int sock);
extern void ap_kill_timeout(request_rec *dummy);
extern void ap_log_assert (const char *szExp, const char *szFile, int nLine);
extern void ap_log_error (const char *err, server_rec *s);
extern void ap_log_printf (const server_rec *s, const char *fmt, ...);
extern void ap_log_reason (const char *reason, const char *file, request_rec *r);
/* prototype for `ap_log_unixerr' cannot be found */
extern array_header * ap_make_array(pool *p, int nelts, int elt_size);
extern char * ap_make_dirstr(pool *p, const char *s, int n);
extern char * ap_make_dirstr_parent(pool *p, const char *s);
extern char * ap_make_dirstr_prefix(char *d, const char *s, int n);
extern ;
extern struct pool * ap_make_sub_pool(struct pool *p);
extern table * ap_make_table(pool *p, int nelts);
extern ;
extern int ap_meets_conditions(request_rec *r);
extern void ap_no2slash(char *name);
extern void ap_note_auth_failure(request_rec *r);
extern void ap_note_basic_auth_failure(request_rec *r);
extern void ap_note_cleanups_for_fd(pool *p, int fd);
extern void ap_note_cleanups_for_file(pool *p, FILE *fp);
extern void ap_note_cleanups_for_socket(pool *p, int fd);
extern void ap_note_digest_auth_failure(request_rec *r);
extern void ap_note_subprocess(pool *a, int pid, enum kill_conditions how);
extern piped_log * ap_open_piped_log (pool *p, const char *program);
extern char * ap_os_escape_path(pool *p, const char *path, int partial);
extern table * ap_overlay_tables(pool *p, const table *overlay, const table *base);
extern void * ap_palloc(struct pool *a, int reqsize);
extern time_t ap_parseHTTPdate(const char *date);
extern int ap_parse_uri_components(pool *p, const char *uri, uri_components *uptr);
extern int ap_parse_hostinfo_components(pool *p, const char *hostinfo, uri_components *uptr);
extern void * ap_pcalloc(struct pool *a, int size);
/* prototype for `ap_pcfg_open_custom' cannot be found */
extern configfile_t * ap_pcfg_openfile(pool *p, const char *name);
extern void ap_pclosedir(pool *p, DIR * d);
extern int ap_pclosef(pool *a, int fd);
extern int ap_pclosesocket(pool *a, int sock);
extern struct hostent * ap_pduphostent(pool *p, struct hostent *hp);
extern int ap_pfclose(pool *a, FILE *fd);
extern FILE * ap_pfdopen(pool *a, int fd, const char *mode);
extern FILE * ap_pfopen(pool *a, const char *name, const char *mode);
extern struct hostent * ap_pgethostbyname(pool *p, const char *hostname);
extern int ap_pool_is_ancestor(pool *a, pool *b);
extern void ap_pool_join(pool *p, pool *sub);
extern DIR * ap_popendir(pool *p, const char *name);
extern int ap_popenf(pool *a, const char *name, int flg, int mode);
extern regex_t * ap_pregcomp(pool *p, const char *pattern, int cflags);
extern void ap_pregfree(pool *p, regex_t * reg);
/* prototype for `ap_pregsub' cannot be found */
extern const char * ap_psignature(const char *prefix, request_rec *r);
extern int ap_psocket(pool *p, int domain, int type, int protocol);
extern char * ap_pstrdup(struct pool *a, const char *s);
extern char * ap_pstrndup(struct pool *a, const char *s, int n);
extern char * ap_pvsprintf(pool *p, const char *fmt, va_list ap);
extern void * ap_push_array(array_header *arr);
extern time_t ap_rationalize_mtime(request_rec *r, time_t mtime);
extern void ap_register_cleanup(pool *p, void *data, void (*plain_cleanup);
extern void ap_remove_module(module *m);
extern array_header * ap_requires (request_rec *r);
extern void ap_reset_timeout(request_rec *r);
extern int ap_rflush(request_rec *r);
extern int ap_rind(const char *s, char c);
extern int ap_rprintf(request_rec *r, const char *fmt,...);
extern int ap_rputc(int c, request_rec *r);
extern int ap_rputs(const char *str, request_rec *r);
extern void ap_run_cleanup(pool *p, void *data, void (*cleanup);
extern int ap_run_sub_req(request_rec *r);
extern int ap_rwrite(const void *buf, int nbyte, request_rec *r);
extern int ap_satisfies (request_rec *r);
extern int ap_scan_script_header_err(request_rec *r, FILE *f, char *buffer);
extern ;
extern long ap_send_fb(BUFF *fb, request_rec *r);
extern long ap_send_fb_length(BUFF *fb, request_rec *r, long length);
extern long ap_send_fd(FILE *f, request_rec *r);
extern long ap_send_fd_length(FILE *f, request_rec *r, long length);
extern void ap_send_http_header(request_rec *r);
extern ;
extern void ap_send_size(size_t size, request_rec *r);
extern char * ap_server_root_relative(pool *p, char *file);
extern int ap_set_byterange(request_rec *r);
extern int ap_set_content_length(request_rec *r, long clength);
extern void ap_set_etag(request_rec *r);
extern int ap_set_keepalive(request_rec *r);
extern void ap_set_last_modified(request_rec *r);
extern void ap_set_module_config(void *conf_vector, module *m, void *val);
extern int ap_setup_client_block(request_rec *r, int read_policy);
extern int ap_should_client_block(request_rec *r);
extern void ap_soft_timeout(char *name, request_rec *r);
extern int ap_some_auth_required(request_rec *r);
extern int ap_spawn_child_err(pool *p, int (*func);
extern int ap_spawn_child_err_buff(pool *p, int (*func);
extern const char * ap_srm_command_loop(cmd_parms *parms, void *config);
extern void ap_str_tolower(char *str);
extern int ap_strcasecmp_match(const char *str, const char *exp);
extern int ap_strcmp_match(const char *str, const char *exp);
extern ;
extern ;
extern void ap_sync_scoreboard_image();
extern void ap_table_add(table *t, const char *key, const char *val);
extern void ap_table_addn(table *t, const char *key, const char *val);
extern char * ap_table_get(const table *t, const char *key);
extern void ap_table_merge(table *t, const char *key, const char *val);
extern void ap_table_mergen(table *t, const char *key, const char *val);
extern void ap_table_set(table *t, const char *key, const char *val);
extern void ap_table_setn(table *t, const char *key, const char *val);
extern void ap_table_unset(table *t, const char *key);
extern time_t ap_tm2sec(const struct tm * t);
extern uid_t ap_uname2id(const char *name);
extern void ap_unblock_alarms();
extern int ap_unescape_url(char *url);
extern char * ap_unparse_uri_components(pool *p, const uri_components *uptr, unsigned flags);
extern time_t ap_update_mtime(request_rec *r, time_t dependency_mtime);
extern char * ap_uudecode(pool *p, const char *bufcoded);
extern int ap_vbprintf(BUFF *fb, const char *fmt, va_list ap);
extern const char * ap_get_server_built();
extern const char * ap_get_server_version();
extern void ap_log_error (const char *err, server_rec *s);

#endif /* APAPI_H */
